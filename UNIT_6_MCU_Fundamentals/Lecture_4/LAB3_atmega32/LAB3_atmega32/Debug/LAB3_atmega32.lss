
LAB3_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000655  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b2  00000000  00000000  00000835  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029b  00000000  00000000  00000de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <INT0_init>:
#define PIND	*((vuint32*)(0x0030))*/

void INT0_init()
{
	//Enable INT0
	SET_BIT(GICR,6);
  6c:	8b b7       	in	r24, 0x3b	; 59
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	8b bf       	out	0x3b, r24	; 59

	//Activate INT0 At any edge difference occurs
	SET_BIT(MCUCR,0);
  72:	85 b7       	in	r24, 0x35	; 53
  74:	81 60       	ori	r24, 0x01	; 1
  76:	85 bf       	out	0x35, r24	; 53
	
	//Enable Global interrupt bit  
	SET_BIT(SREG,7);
  78:	8f b7       	in	r24, 0x3f	; 63
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	8f bf       	out	0x3f, r24	; 63
  7e:	08 95       	ret

00000080 <PORTD_init>:
}

void PORTD_init(void)
{
	CLEAR_BIT(DDRD,2);
  80:	81 b3       	in	r24, 0x11	; 17
  82:	8b 7f       	andi	r24, 0xFB	; 251
  84:	81 bb       	out	0x11, r24	; 17
	SET_BIT(PORTD,2);
  86:	82 b3       	in	r24, 0x12	; 18
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	82 bb       	out	0x12, r24	; 18
	SET_BIT(DDRD,7);
  8c:	81 b3       	in	r24, 0x11	; 17
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	81 bb       	out	0x11, r24	; 17
  92:	08 95       	ret

00000094 <main>:
}

int main(void)
{
	INT0_init();
  94:	0e 94 36 00 	call	0x6c	; 0x6c <INT0_init>
	PORTD_init();
  98:	0e 94 40 00 	call	0x80	; 0x80 <PORTD_init>
  9c:	ff cf       	rjmp	.-2      	; 0x9c <main+0x8>

0000009e <__vector_1>:
    {
    }
}

ISR(INT0_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
	SET_BIT(PORTD,7);
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	89 e6       	ldi	r24, 0x69	; 105
  b8:	98 e1       	ldi	r25, 0x18	; 24
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <__vector_1+0x1c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <__vector_1+0x26>
  c4:	00 00       	nop
	_delay_ms(1000);
	CLEAR_BIT(PORTD,7);	
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	8f 77       	andi	r24, 0x7F	; 127
  ca:	82 bb       	out	0x12, r24	; 18
	SET_BIT(GIFR,6);
  cc:	8a b7       	in	r24, 0x3a	; 58
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	8a bf       	out	0x3a, r24	; 58
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	2f 91       	pop	r18
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
