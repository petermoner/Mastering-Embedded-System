
unit6_lesson1_lab2_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002b4  080002b4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002b4  080002b4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080002b4  080002b4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002b4  080002b4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002b4  080002b4  000102b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002b8  080002b8  000102b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080002bc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080002c0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080002c0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c5b  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000446  00000000  00000000  00020c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b8  00000000  00000000  000210d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000170  00000000  00000000  00021288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000fac  00000000  00000000  000213f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000163e  00000000  00000000  000223a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078d24  00000000  00000000  000239e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009c706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000510  00000000  00000000  0009c784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800029c 	.word	0x0800029c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800029c 	.word	0x0800029c

0800014c <clock_init>:
#define RCC_CFGR 		*((vuint32*)(RCC_BASE + 0x04))



void clock_init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	//Store 101 in bits 13 : 11 = 101 for prescaler 4 --> APB2 = AHB/4
	RCC_CFGR |= (0b101 << 11);
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <clock_init+0x24>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a06      	ldr	r2, [pc, #24]	; (8000170 <clock_init+0x24>)
 8000156:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800015a:	6013      	str	r3, [r2, #0]

	//Store 100 in bits 10 : 8 = 100 for prescaler 2 --> APB1 = AHB/2
	RCC_CFGR |= (0b100 << 8);
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <clock_init+0x24>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a03      	ldr	r2, [pc, #12]	; (8000170 <clock_init+0x24>)
 8000162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000166:	6013      	str	r3, [r2, #0]
}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	40021004 	.word	0x40021004

08000174 <main>:



int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	clock_init();
 8000178:	f7ff ffe8 	bl	800014c <clock_init>


	return 0;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}

08000182 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000182:	b480      	push	{r7}
 8000184:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000186:	bf00      	nop
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr

0800018e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800018e:	b480      	push	{r7}
 8000190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000192:	e7fe      	b.n	8000192 <HardFault_Handler+0x4>

08000194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000198:	e7fe      	b.n	8000198 <MemManage_Handler+0x4>

0800019a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800019a:	b480      	push	{r7}
 800019c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800019e:	e7fe      	b.n	800019e <BusFault_Handler+0x4>

080001a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001a4:	e7fe      	b.n	80001a4 <UsageFault_Handler+0x4>

080001a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001a6:	b480      	push	{r7}
 80001a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001aa:	bf00      	nop
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr

080001b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001b2:	b480      	push	{r7}
 80001b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001b6:	bf00      	nop
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr

080001be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001be:	b480      	push	{r7}
 80001c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr

080001ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001ca:	b580      	push	{r7, lr}
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001ce:	f000 f82f 	bl	8000230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001d2:	bf00      	nop
 80001d4:	bd80      	pop	{r7, pc}

080001d6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001d6:	b480      	push	{r7}
 80001d8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
	...

080001e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e4:	480c      	ldr	r0, [pc, #48]	; (8000218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80001e6:	490d      	ldr	r1, [pc, #52]	; (800021c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80001e8:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80001ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001ec:	e002      	b.n	80001f4 <LoopCopyDataInit>

080001ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001f2:	3304      	adds	r3, #4

080001f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f8:	d3f9      	bcc.n	80001ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001fa:	4a0a      	ldr	r2, [pc, #40]	; (8000224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80001fc:	4c0a      	ldr	r4, [pc, #40]	; (8000228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80001fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000200:	e001      	b.n	8000206 <LoopFillZerobss>

08000202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000204:	3204      	adds	r2, #4

08000206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000208:	d3fb      	bcc.n	8000202 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800020a:	f7ff ffe4 	bl	80001d6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800020e:	f000 f821 	bl	8000254 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000212:	f7ff ffaf 	bl	8000174 <main>
  bx lr
 8000216:	4770      	bx	lr
  ldr r0, =_sdata
 8000218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800021c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000220:	080002bc 	.word	0x080002bc
  ldr r2, =_sbss
 8000224:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000228:	20000024 	.word	0x20000024

0800022c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800022c:	e7fe      	b.n	800022c <ADC1_2_IRQHandler>
	...

08000230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <HAL_IncTick+0x1c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	461a      	mov	r2, r3
 800023a:	4b05      	ldr	r3, [pc, #20]	; (8000250 <HAL_IncTick+0x20>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4413      	add	r3, r2
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <HAL_IncTick+0x20>)
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	20000000 	.word	0x20000000
 8000250:	20000020 	.word	0x20000020

08000254 <__libc_init_array>:
 8000254:	b570      	push	{r4, r5, r6, lr}
 8000256:	2500      	movs	r5, #0
 8000258:	4e0c      	ldr	r6, [pc, #48]	; (800028c <__libc_init_array+0x38>)
 800025a:	4c0d      	ldr	r4, [pc, #52]	; (8000290 <__libc_init_array+0x3c>)
 800025c:	1ba4      	subs	r4, r4, r6
 800025e:	10a4      	asrs	r4, r4, #2
 8000260:	42a5      	cmp	r5, r4
 8000262:	d109      	bne.n	8000278 <__libc_init_array+0x24>
 8000264:	f000 f81a 	bl	800029c <_init>
 8000268:	2500      	movs	r5, #0
 800026a:	4e0a      	ldr	r6, [pc, #40]	; (8000294 <__libc_init_array+0x40>)
 800026c:	4c0a      	ldr	r4, [pc, #40]	; (8000298 <__libc_init_array+0x44>)
 800026e:	1ba4      	subs	r4, r4, r6
 8000270:	10a4      	asrs	r4, r4, #2
 8000272:	42a5      	cmp	r5, r4
 8000274:	d105      	bne.n	8000282 <__libc_init_array+0x2e>
 8000276:	bd70      	pop	{r4, r5, r6, pc}
 8000278:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800027c:	4798      	blx	r3
 800027e:	3501      	adds	r5, #1
 8000280:	e7ee      	b.n	8000260 <__libc_init_array+0xc>
 8000282:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000286:	4798      	blx	r3
 8000288:	3501      	adds	r5, #1
 800028a:	e7f2      	b.n	8000272 <__libc_init_array+0x1e>
 800028c:	080002b4 	.word	0x080002b4
 8000290:	080002b4 	.word	0x080002b4
 8000294:	080002b4 	.word	0x080002b4
 8000298:	080002b8 	.word	0x080002b8

0800029c <_init>:
 800029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029e:	bf00      	nop
 80002a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002a2:	bc08      	pop	{r3}
 80002a4:	469e      	mov	lr, r3
 80002a6:	4770      	bx	lr

080002a8 <_fini>:
 80002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002aa:	bf00      	nop
 80002ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ae:	bc08      	pop	{r3}
 80002b0:	469e      	mov	lr, r3
 80002b2:	4770      	bx	lr
